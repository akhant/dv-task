{"version":3,"sources":["utils/index.ts","firebase/index.ts","redux/index.ts","components/PlaceCardElement.tsx","components/Disposition.tsx","components/InventoryItem.tsx","components/InventoryList.tsx","components/BuildingPicker.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["normalizeData","arr","res","recFunc","id","mainObj","obj","find","item","parts","parentId","childrens","newObj","i","push","building","findMinLevelIds","places","recFindMin","placesArr","place","app","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","getPlaces","createAsyncThunk","arg","a","firestore","collection","get","response","docs","map","x","data","name","part","getInventory","count","placeId","addInv","filestore","add","doc","invItem","updateInv","set","removeInv","delete","preloadedState","inventory","placesSlice","createSlice","initialState","reducers","extraReducers","fulfilled","state","action","payload","rejected","dataSlice","buildingId","setPlaceId","setBuildingId","reducer","filter","el","store","configureStore","middleware","getDefaultMiddleware","thunk","immutableCheck","serializableCheck","devTools","process","actions","useStyles","makeStyles","theme","title","fontSize","card","cursor","margin","display","alignItems","transition","transitions","create","duration","transform","background","active","iconStorageWrapper","justifyContent","PlaceCardElement","inv","classes","useSelector","Card","className","onClick","event","dispatch","CardContent","Typography","color","gutterBottom","findIndex","root","width","marginTop","Disposition","rootItem","Grid","container","renderChildrens","direction","justify","wrap","xs","child","content","wordBreak","details","heading","typography","pxToRem","flexBasis","flexShrink","secondaryHeading","palette","text","secondary","inputCount","textAlign","InventoryItem","React","memo","useState","expanded","setExpanded","setName","setCount","Accordion","onChange","AccordionSummary","aria-controls","stopPropagation","AccordionDetails","TextField","value","target","label","variant","Button","Number","InventoryList","useEffect","addInvToRes","findNode","placesArray","filterInventory","length","formControl","marginBottom","BuildingPicker","setBuilding","FormControl","InputLabel","Select","labelId","nativeEvent","dataset","MenuItem","data-id","minHeight","divider","alignSelf","addIcon","addIconWrapper","App","Divider","orientation","some","getState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9fd222a6.chunk.js","sourcesContent":["import { PlaceItem, InvItem } from './../interfaces/index';\r\n\r\n// transoform data to tree\r\n// input PlaceItem[]\r\nexport const normalizeData = (arr: any) => {\r\n  let res: any = [];\r\n\r\n  //recursive function\r\n  const recFunc = (id: string, mainObj: any) => {\r\n    const obj = arr.find((item: PlaceItem) => item.id === id);\r\n\r\n    if (!obj?.parts) {\r\n      //@ts-ignore\r\n      obj.parentId = mainObj;\r\n      return obj;\r\n    }\r\n\r\n    let childrens = [];\r\n\r\n    for (let item of obj.parts) {\r\n      const newObj = {\r\n        ...arr.find((i: PlaceItem) => i.id === item),\r\n        parentId: mainObj.id,\r\n      };\r\n      childrens.push(recFunc(item, newObj));\r\n    }\r\n\r\n    mainObj.childrens = childrens;\r\n    return mainObj;\r\n  };\r\n\r\n  for (let building of arr) {\r\n    if (building.id === 'main' || building.id === 'production') {\r\n      res.push(recFunc(building.id, building));\r\n    }\r\n  }\r\n\r\n  return res;\r\n};\r\n\r\nexport const filterInventory = (\r\n  placesArr: PlaceItem[],\r\n  inv: InvItem[],\r\n  placeId: string\r\n) => {\r\n  let res: any = [];\r\n  const addInvToRes = (place: PlaceItem) => {\r\n    res = [...res, ...inv.filter((item: InvItem) => item.placeId === place.id)];\r\n\r\n    if (place.childrens) {\r\n      for (let item of place.childrens) {\r\n        addInvToRes(item);\r\n      }\r\n    }\r\n  };\r\n  const findNode = (placesArray: PlaceItem[]) => {\r\n    for (let place of placesArray) {\r\n      if (place.id === placeId) {\r\n        addInvToRes(place);\r\n        break;\r\n      }\r\n      if (place.childrens) {\r\n        findNode(place.childrens);\r\n      }\r\n    }\r\n  };\r\n\r\n  findNode(placesArr);\r\n\r\n  return res;\r\n};\r\n\r\nexport const findMinLevelIds = (places: PlaceItem[]) => {\r\n  const res: string[] = [];\r\n\r\n  const recFindMin = (placesArr: typeof places) => {\r\n    for (let place of placesArr) {\r\n      if (place.childrens) {\r\n        recFindMin(place.childrens);\r\n      } else {\r\n        res.push(place.id);\r\n      }\r\n    }\r\n  };\r\n\r\n  recFindMin(places);\r\n  return res;\r\n};\r\n","import firebase from 'firebase';\r\n\r\nvar firebaseConfig = {\r\n  apiKey: 'AIzaSyD6DnGbVfdJlDJ_pEOUfDfTDJrA8j3lIs8',\r\n  authDomain: 'dv-inventory.firebaseapp.com',\r\n  databaseURL: 'https://dv-inventory.firebaseio.com',\r\n  projectId: 'dv-inventory',\r\n  storageBucket: 'dv-inventory.appspot.com',\r\n  messagingSenderId: '130062240176',\r\n  appId: '1:130062240176:web:ecbca5d29b37d25c6cee75',\r\n};\r\n\r\nvar app = firebase.initializeApp(firebaseConfig);\r\nexport default app;\r\n","import { InvItem } from './../interfaces/index';\r\nimport { normalizeData } from './../utils/index';\r\nimport {\r\n  configureStore,\r\n  ThunkAction,\r\n  Action,\r\n  createSlice,\r\n  createAsyncThunk,\r\n} from '@reduxjs/toolkit';\r\nimport app from '../firebase';\r\n\r\n// --------------------- actions ----------------------\r\nexport const getPlaces = createAsyncThunk('places/get', async (arg) => {\r\n  const response = await app.firestore().collection('places').get();\r\n  let docs = response.docs.map((x) => ({\r\n    id: x.id,\r\n    data: { name: x.data().name },\r\n    parts: x.data().parts && x.data().parts.map((part: any) => part.id),\r\n  }));\r\n\r\n  return normalizeData(docs);\r\n});\r\n\r\nexport const getInventory = createAsyncThunk('inventory/get', async (arg) => {\r\n  const response = await app.firestore().collection('inventory').get();\r\n\r\n  let docs = response.docs.map((x) => ({\r\n    id: x.id,\r\n    data: { name: x.data().name, count: x.data().count },\r\n    placeId: x.data().place && x.data().place.id,\r\n  }));\r\n  return { docs };\r\n});\r\n\r\nexport const addInv = createAsyncThunk(\r\n  'inventory/add',\r\n  //@ts-ignore\r\n  async ({ placeId }) => {\r\n    let filestore = app.firestore();\r\n    const response = await filestore.collection('inventory').add({\r\n      name: '',\r\n      count: 0,\r\n      place: filestore.collection('places').doc(placeId),\r\n    });\r\n    return {\r\n      invItem: { data: { name: '', count: 0 }, id: response.id, placeId },\r\n    };\r\n  }\r\n);\r\n\r\nexport const updateInv = createAsyncThunk(\r\n  'inventory/update',\r\n  //@ts-ignore\r\n  async ({ id, name, count, placeId }) => {\r\n    await app\r\n      .firestore()\r\n      .collection('inventory')\r\n      .doc(id)\r\n      .set({\r\n        name,\r\n        count,\r\n        place: app.firestore().collection('places').doc(placeId),\r\n      });\r\n    return { invItem: { id, data: { name, count }, placeId } };\r\n  }\r\n);\r\n\r\nexport const removeInv = createAsyncThunk(\r\n  'inventory/remove',\r\n  //@ts-ignore\r\n  async ({ id }) => {\r\n    app.firestore().collection('inventory').doc(id).delete();\r\n\r\n    return { id };\r\n  }\r\n);\r\n\r\n// --------------------- reducers ----------------------\r\n\r\nconst preloadedState = {\r\n  inventory: [],\r\n  places: [],\r\n};\r\n\r\nconst placesSlice = createSlice({\r\n  name: 'places',\r\n  initialState: preloadedState.places,\r\n  reducers: {},\r\n  extraReducers: {\r\n    //@ts-ignore\r\n    [getPlaces.fulfilled]: (state, action) => {\r\n      return action.payload;\r\n    },\r\n    //@ts-ignore\r\n    [getPlaces.rejected]: (state, action) => {\r\n      return [];\r\n    },\r\n  },\r\n});\r\n\r\nconst dataSlice = createSlice({\r\n  name: 'data',\r\n  initialState: { placeId: 'main', buildingId: 'main' },\r\n  reducers: {\r\n    setPlaceId(state, action) {\r\n      return { ...state, placeId: action.payload.placeId };\r\n    },\r\n    setBuildingId(state, action) {\r\n      return { ...state, buildingId: action.payload.buildingId };\r\n    },\r\n  },\r\n});\r\n\r\nconst inventorySlice = createSlice({\r\n  name: 'inventory',\r\n  initialState: preloadedState.inventory,\r\n  reducers: {},\r\n  extraReducers: {\r\n    //@ts-ignore\r\n    [getInventory.fulfilled]: (state, action) => {\r\n      state = action.payload.docs;\r\n      return state;\r\n    },\r\n    //@ts-ignore\r\n    [getInventory.rejected]: (state, action) => {\r\n      return state;\r\n    },\r\n    //@ts-ignore\r\n    [addInv.fulfilled]: (state, action) => {\r\n      return [...state, action.payload.invItem];\r\n    },\r\n    //@ts-ignore\r\n    [addInv.rejected]: (state, action) => {\r\n      return state;\r\n    },\r\n    //@ts-ignore\r\n    [updateInv.fulfilled]: (state, action) => {\r\n      const { invItem } = action.payload;\r\n      return state.map((item: any) => {\r\n        if (item.id === invItem.id) {\r\n          const newItem = { ...invItem };\r\n          return newItem;\r\n        } else {\r\n          return item;\r\n        }\r\n      });\r\n    },\r\n    //@ts-ignore\r\n    [updateInv.rejected]: (state, action) => {\r\n      return state;\r\n    },\r\n    //@ts-ignore\r\n    [removeInv.fulfilled]: (state, action) => {\r\n      return state.filter((el: InvItem) => el.id !== action.payload.id);\r\n    },\r\n    //@ts-ignore\r\n    [removeInv.rejected]: (state, action) => {\r\n      return state;\r\n    },\r\n  },\r\n});\r\n\r\n// --------------------- config ----------------------\r\nconst reducer = {\r\n  inventory: inventorySlice.reducer,\r\n  places: placesSlice.reducer,\r\n  data: dataSlice.reducer,\r\n};\r\n\r\nexport const store = configureStore({\r\n  reducer,\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware({\r\n      thunk: true,\r\n      immutableCheck: true,\r\n      serializableCheck: false,\r\n    }),\r\n  devTools: process.env.NODE_ENV !== 'production',\r\n});\r\n\r\nexport const { setPlaceId, setBuildingId } = dataSlice.actions;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","import React from 'react';\r\nimport { InvItem, PlaceCardElementProps } from '../interfaces';\r\nimport { store, setPlaceId, RootState } from '../redux';\r\nimport { Card } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { useSelector } from 'react-redux';\r\nimport StorageIcon from '@material-ui/icons/Storage';\r\n\r\nconst useStyles = makeStyles((theme: any) => ({\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  card: {\r\n    cursor: 'pointer',\r\n    margin: 10,\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    transition: theme.transitions.create(['transform', 'background'], {\r\n      duration: 500,\r\n    }),\r\n    '&:hover': {\r\n      transform: 'translate(-3%,-3%)',\r\n      background: 'linear-gradient(0deg, #d1d1e0 30%, #e1e1ea 90%)',\r\n    },\r\n  },\r\n  active: {\r\n    background: 'linear-gradient(0deg, #d1d1e0 30%, #e1e1ea 90%)',\r\n  },\r\n  iconStorageWrapper: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n  },\r\n}));\r\n\r\nconst PlaceCardElement: React.FC<PlaceCardElementProps> = ({ item }) => {\r\n  const classes = useStyles();\r\n  const { inventory } = useSelector((state: RootState) => state);\r\n  const {\r\n    data: { placeId },\r\n  } = useSelector((state: RootState) => state);\r\n  const handleClick = (event: any) => {\r\n    store.dispatch(setPlaceId({ placeId: item.id }));\r\n  };\r\n  const hasInventory = (inv: InvItem[], id: string) => {\r\n    return inv.findIndex((el: InvItem) => el.placeId === id) !== -1;\r\n  };\r\n  return (\r\n    <Card\r\n      className={`${\r\n        placeId === item.id ? classes.card + ' ' + classes.active : classes.card\r\n      }`}\r\n      onClick={handleClick}\r\n    >\r\n      <CardContent>\r\n        <Typography\r\n          className={classes.title}\r\n          color='textSecondary'\r\n          gutterBottom\r\n        >\r\n          {item.data.name}\r\n        </Typography>\r\n        <div className={classes.iconStorageWrapper}>\r\n          {hasInventory(inventory, item.id) && <StorageIcon />}\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default PlaceCardElement;\r\n","import { Grid, makeStyles } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { PlaceItem } from '../interfaces';\r\nimport { RootState } from '../redux';\r\nimport PlaceCardElement from './PlaceCardElement';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    marginTop: 40,\r\n  },\r\n}));\r\n\r\nconst Disposition = () => {\r\n  const classes = useStyles();\r\n  const { places, data } = useSelector((state: RootState) => state);\r\n  const rootItem = places.find((building: PlaceItem) => {\r\n    return building.id === data.buildingId;\r\n  });\r\n\r\n  const renderChildrens = (item: PlaceItem | undefined) => {\r\n    if (!item) return null;\r\n    return (\r\n      <Grid key={item.id} alignItems='center' container direction='column'>\r\n        <PlaceCardElement item={item} />\r\n        <Grid\r\n          justify='center'\r\n          wrap='nowrap'\r\n          container\r\n          item\r\n          direction={'row'}\r\n          xs={6}\r\n        >\r\n          {item.childrens?.map((child: PlaceItem) => {\r\n            return renderChildrens(child);\r\n          })}\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Grid className={classes.root} container>\r\n      {renderChildrens(rootItem)}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Disposition;\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport Typography from '@material-ui/core/Typography';\r\n//import ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { InventoryItemProps } from '../interfaces';\r\nimport DeleteOutlineOutlinedIcon from '@material-ui/icons/DeleteOutlineOutlined';\r\n// import { removeInv, store, updateInv } from '../redux';\r\nimport { Button, TextField } from '@material-ui/core';\r\nimport { removeInv, store, updateInv } from '../redux';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {},\r\n  content: {\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    wordBreak: 'break-all',\r\n  },\r\n  details: {\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    flexBasis: '33.33%',\r\n    flexShrink: 0,\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  inputCount: {\r\n    width: 100,\r\n    '& input': {\r\n      textAlign: 'center',\r\n    },\r\n  },\r\n}));\r\n\r\nconst InventoryItem: React.FC<InventoryItemProps> = React.memo(({ item }) => {\r\n  const classes = useStyles();\r\n  const [expanded, setExpanded] = React.useState(false);\r\n  const [name, setName] = React.useState(item.data?.name);\r\n  const [count, setCount] = React.useState(item.data?.count);\r\n\r\n  const handleOpen = () => {\r\n    setExpanded((state) => !state);\r\n  };\r\n  const handleDelete = (event: any) => {\r\n    event.stopPropagation();\r\n    //@ts-ignore\r\n    store.dispatch(removeInv({ id: item.id }));\r\n  };\r\n\r\n  const handleUpdateInv = () => {\r\n    store.dispatch(\r\n      //@ts-ignore\r\n      updateInv({\r\n        id: item.id,\r\n        name,\r\n        count: Number(count),\r\n        placeId: item.placeId,\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Accordion expanded={expanded} onChange={handleOpen}>\r\n      <AccordionSummary\r\n        //className={classes.summary}\r\n        aria-controls='panel1bh-content'\r\n        id='panel1bh-header'\r\n        //@ts-ignore\r\n        classes={{ content: classes.content }}\r\n      >\r\n        <Typography className={classes.heading}>{item.data.name}</Typography>\r\n        <Typography className={classes.secondaryHeading}>\r\n          {item.data.count}\r\n        </Typography>\r\n        <DeleteOutlineOutlinedIcon onClick={handleDelete} />\r\n      </AccordionSummary>\r\n      <AccordionDetails classes={{ root: classes.details }}>\r\n        <TextField\r\n          value={name}\r\n          onChange={(event) => setName(event.target.value)}\r\n          label='Название'\r\n          variant='outlined'\r\n        />\r\n        <TextField\r\n          classes={{ root: classes.inputCount }}\r\n          value={count}\r\n          onChange={(event) => setCount(event.target.value)}\r\n          label='Количество'\r\n          variant='outlined'\r\n        />\r\n        <Button variant='outlined' onClick={handleUpdateInv}>\r\n          Сохранить\r\n        </Button>\r\n      </AccordionDetails>\r\n    </Accordion>\r\n  );\r\n});\r\n\r\nexport default InventoryItem;\r\n","import React, { useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport { useSelector } from 'react-redux';\r\nimport { InventoryListProps, InvItem } from '../interfaces';\r\nimport { getInventory, RootState, store } from '../redux';\r\nimport InventoryItem from './InventoryItem';\r\nimport { filterInventory } from '../utils';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    marginTop: 40,\r\n    width: '80%',\r\n  },\r\n});\r\nconst InventoryList: React.FC<InventoryListProps> = React.memo(() => {\r\n  useEffect(() => {\r\n    store.dispatch(getInventory());\r\n  }, []);\r\n  const classes = useStyles();\r\n  const { places, inventory, data } = useSelector((state: RootState) => state);\r\n\r\n  let inv = filterInventory(places, inventory, data.placeId);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {!inventory.length\r\n        ? null\r\n        : inv.map((item: InvItem) => {\r\n            return <InventoryItem key={item.id} item={item} />;\r\n          })}\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default InventoryList;\r\n","import React, { useState } from 'react';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport { PlaceItem } from '../interfaces';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState, setBuildingId, setPlaceId, store } from '../redux';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    width: 300,\r\n    marginTop: 40,\r\n    marginBottom: 40,\r\n  },\r\n}));\r\n\r\nconst BuildingPicker = () => {\r\n  const classes = useStyles();\r\n  const { places } = useSelector((state: RootState) => state);\r\n  const [building, setBuilding] = useState('Главный офис');\r\n\r\n  const handleChangeBuilding = (event: any) => {\r\n    store.dispatch(\r\n      setBuildingId({ buildingId: event.nativeEvent.target.dataset.id })\r\n    );\r\n    store.dispatch(\r\n      setPlaceId({ placeId: event.nativeEvent.target.dataset.id })\r\n    );\r\n    setBuilding(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <FormControl variant='outlined' className={classes.formControl}>\r\n      <InputLabel id='demo-simple-select-label'>Здание</InputLabel>\r\n      <Select\r\n        labelId='building-select'\r\n        id='building-select'\r\n        value={building}\r\n        onChange={handleChangeBuilding}\r\n        label='Здание'\r\n      >\r\n        {places?.map((item: PlaceItem) => {\r\n          //select buildings\r\n          if (item.id === 'main' || item.id === 'production') {\r\n            return (\r\n              <MenuItem key={item.id} data-id={item.id} value={item.data.name}>\r\n                {item.data.name}\r\n              </MenuItem>\r\n            );\r\n          }\r\n        })}\r\n      </Select>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default BuildingPicker;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { RootState, store, addInv, getPlaces } from '../redux';\r\nimport Disposition from './Disposition';\r\nimport InventoryList from './InventoryList';\r\nimport { Divider, Grid, makeStyles } from '@material-ui/core';\r\nimport BuildingPicker from './BuildingPicker';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport { findMinLevelIds } from '../utils';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    minHeight: '100vh',\r\n  },\r\n\r\n  divider: {\r\n    alignSelf: 'stretch',\r\n  },\r\n  addIcon: {\r\n    cursor: 'pointer',\r\n    color: '#43d691',\r\n    fontSize: 50,\r\n    transition: theme.transitions.create(['transform'], {\r\n      duration: 500,\r\n    }),\r\n    '&:hover': {\r\n      color: '#2ed185',\r\n      transform: 'scale(1.1)',\r\n    },\r\n  },\r\n  addIconWrapper: {\r\n    display: 'flex',\r\n    justifyContent: 'end',\r\n    marginTop: 20,\r\n    width: '80%',\r\n  },\r\n}));\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n  const { places, data } = useSelector((state: RootState) => state);\r\n\r\n  useEffect(() => {\r\n    store.dispatch(getPlaces());\r\n  }, []);\r\n\r\n  const handleAddInv = () => {\r\n    //@ts-ignore\r\n    store.dispatch(addInv({ placeId: store.getState().data.placeId }));\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid className={classes.root} container direction='row'>\r\n        <Grid container direction='column' alignItems='center' item xs={6}>\r\n          <BuildingPicker />\r\n          <Divider className={classes.divider} variant='middle' />\r\n          <Disposition />\r\n        </Grid>\r\n        <Grid item xs={1}>\r\n          <Divider orientation='vertical' />\r\n        </Grid>\r\n        <Grid item xs={5}>\r\n          <InventoryList />\r\n          {findMinLevelIds(places).some((item) => item === data.placeId) && (\r\n            <div className={classes.addIconWrapper}>\r\n              <AddCircleIcon\r\n                className={classes.addIcon}\r\n                onClick={handleAddInv}\r\n              />\r\n            </div>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport { store } from './redux';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}